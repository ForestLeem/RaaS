# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'RtoA.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import json

import PyQt5.sip
from PyQt5 import QtCore, QtGui, QtWidgets
from ResToAsset import RaaA
from UI import confirm_rule
from UI import confirm_type
from ODRL import Party
from ODRL import Asset
from ODRL import Action
from ODRL import Constraint
from ODRL import Policy
from ODRL import Rule
from Resource import Provider
from Resource import Resource as Res
from Resource import Interface
from Resource import Func_Char
from Resource import Non_Func_Char
from Resource import Operation


class Ui_MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(Ui_MainWindow, self).__init__()

    def setup_UI(self, MainWindow, ResEditor, RtoAUI):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(980, 620)

        self.MainWindow = MainWindow
        self.ResEditor = ResEditor

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.scrollArea_R = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea_R.setWidgetResizable(True)
        self.scrollArea_R.setObjectName("scrollArea_R")
        self.scrollAreaWidgetContents_R = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_R.setGeometry(QtCore.QRect(0, 0, 470, 570))
        self.scrollAreaWidgetContents_R.setObjectName("scrollAreaWidgetContents_R")
        self.txt_Res = QtWidgets.QTextEdit(self.scrollAreaWidgetContents_R)
        self.txt_Res.setGeometry(QtCore.QRect(0, 0, 411, 561))
        self.txt_Res.setObjectName("txt_Res")
        self.btn_R2A = QtWidgets.QPushButton(self.scrollAreaWidgetContents_R)
        self.btn_R2A.setGeometry(QtCore.QRect(410, 220, 65, 81))
        self.btn_R2A.setObjectName("btn_R2A")
        self.scrollArea_R.setWidget(self.scrollAreaWidgetContents_R)
        self.gridLayout.addWidget(self.scrollArea_R, 0, 0, 1, 1)
        self.scrollArea_A = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea_A.setWidgetResizable(True)
        self.scrollArea_A.setObjectName("scrollArea_A")
        self.scrollAreaWidgetContents_A = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_A.setGeometry(QtCore.QRect(0, 0, 470, 570))
        self.scrollAreaWidgetContents_A.setObjectName("scrollAreaWidgetContents_A")
        self.txt_Asset = QtWidgets.QTextEdit(self.scrollAreaWidgetContents_A)
        self.txt_Asset.setGeometry(QtCore.QRect(0, 0, 471, 521))
        self.txt_Asset.setObjectName("txt_Asset")
        # self.btn_previous = QtWidgets.QPushButton(self.scrollAreaWidgetContents_A)
        # self.btn_previous.setGeometry(QtCore.QRect(60, 520, 101, 31))
        # self.btn_previous.setObjectName("btn_previous")
        # self.btn_next = QtWidgets.QPushButton(self.scrollAreaWidgetContents_A)
        # self.btn_next.setGeometry(QtCore.QRect(210, 520, 101, 31))
        # self.btn_next.setObjectName("btn_next")
        # self.page = QtWidgets.QLabel(self.scrollAreaWidgetContents_A)
        # self.page.setGeometry(QtCore.QRect(160, 520, 51, 31))
        # self.page.setObjectName("page")
        self.btn_sava = QtWidgets.QPushButton(self.scrollAreaWidgetContents_A)
        self.btn_sava.setGeometry(QtCore.QRect(370, 520, 101, 31))
        self.btn_sava.setObjectName("btn_sava")
        self.scrollArea_A.setWidget(self.scrollAreaWidgetContents_A)
        self.gridLayout.addWidget(self.scrollArea_A, 0, 1, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 960, 18))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuMode = QtWidgets.QMenu(self.menubar)
        self.menuMode.setObjectName("menuMode")
        MainWindow.setMenuBar(self.menubar)
        self.statusBar = QtWidgets.QStatusBar(MainWindow)
        self.statusBar.setObjectName("statusBar")
        MainWindow.setStatusBar(self.statusBar)
        self.actionClear = QtWidgets.QAction(MainWindow)
        self.actionClear.setObjectName("actionClear")
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionResEditor = QtWidgets.QAction(MainWindow)
        self.actionResEditor.setObjectName("actionResEditor")
        self.actionR_A_projection = QtWidgets.QAction(MainWindow)
        self.actionR_A_projection.setObjectName("actionR_A_projection")
        self.actionA_S_projection = QtWidgets.QAction(MainWindow)
        self.actionA_S_projection.setObjectName("actionA_S_projection")
        self.menuFile.addAction(self.actionClear)
        self.menuFile.addAction(self.actionOpen)
        self.menuMode.addAction(self.actionResEditor)
        self.menuMode.addAction(self.actionR_A_projection)
        self.menuMode.addAction(self.actionA_S_projection)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuMode.menuAction())

        self.actionResEditor.setCheckable(True)
        self.actionA_S_projection.setCheckable(True)
        self.actionR_A_projection.setCheckable(True)
        self.actionR_A_projection.setChecked(True)                      # default
        self.bind_function()
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "R-A projection"))
        self.btn_R2A.setText(_translate("MainWindow", "Res \n"
"to \n"
" Asset"))
        # self.btn_previous.setText(_translate("MainWindow", "<previous asset"))
        # self.btn_next.setText(_translate("MainWindow", "<next asset"))
        # self.page.setText(_translate("MainWindow", "  0/0"))
        self.btn_sava.setText(_translate("MainWindow", "Save"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuMode.setTitle(_translate("MainWindow", "Mode"))
        self.actionClear.setText(_translate("MainWindow", "New"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionResEditor.setText(_translate("MainWindow", "ResEditor"))
        self.actionR_A_projection.setText(_translate("MainWindow", "R-A projection"))
        self.actionA_S_projection.setText(_translate("MainWindow", "A-S projection"))

    def bind_function(self):
        self.btn_R2A.clicked.connect(self.Res_To_Asset)
        self.btn_sava.clicked.connect(self.save_Asset)
        self.actionR_A_projection.triggered.connect(self.change_to_R_A_UI)
        self.actionResEditor.triggered.connect(self.change_to_ResEditor_UI)
        self.actionA_S_projection.triggered.connect(self.change_to_A_S_UI)
        self.actionClear.triggered.connect(self.new_file)
        self.actionOpen.triggered.connect(self.open_resource)

    # menubar function BEGIN
    def change_to_R_A_UI(self):
        self.actionR_A_projection.setChecked(True)

    def change_to_ResEditor_UI(self):
        reply = QtWidgets.QMessageBox.question(None, "Warning", "Are you sure to change to MODE ResEditor?\n "
                                                                "(make sure you have save your file!)",
                                               QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
                                               QtWidgets.QMessageBox.No)
        if reply == QtWidgets.QMessageBox.Yes:
            self.ResEditor.setup_UI(self.MainWindow, self.ResEditor, self)
        else:
            self.actionResEditor.setChecked(False)

    def change_to_A_S_UI(self):
        reply = QtWidgets.QMessageBox.question(None, "Warning", "Are you sure to change to MODE ResEditor?\n "
                                                                "(make sure you have save your file!)",
                                               QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
                                               QtWidgets.QMessageBox.No)
        if reply == QtWidgets.QMessageBox.Yes:
            self.ResEditor.setup_UI(self.MainWindow, self.ResEditor, self)
        else:
            self.actionA_S_projection.setChecked(False)

    def new_file(self):
        reply = QtWidgets.QMessageBox.question(None, "new file",
                                                     "Do you want to start new R-A projection \n"
                                                     "(Please make sure you have saved your file.)",
                                                     QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
                                                     QtWidgets.QMessageBox.No)
        if reply == QtWidgets.QMessageBox.Yes:
            tmpMainWindow = self.MainWindow
            tmpRes = self.ResEditor
            PyQt5.sip.delete(self.centralwidget)
            self.setup_UI(tmpMainWindow, tmpRes, self)
        else:
            return

    def open_resource(self):
        openfile, ok = QtWidgets.QFileDialog.getOpenFileName(None, "open", "/", "json(*.json)")

        try:
            with open(openfile, "r") as f:
                tmp_json = json.load(f)
                tmp_str = json.dumps(tmp_json, indent=1)
                self.txt_Res.setText(tmp_str)
        except Exception as e:
            print(e)

    # menubar function END

    def save_Asset(self):
        save_path, ok = QtWidgets.QFileDialog.getSaveFileName(None, "save", "/", "json(*.json)")
        if ok != "":
            try:
                with open(save_path, "w") as f:
                    f.write(self.txt_Asset.toPlainText())

            except Exception as e:
                print(e)

    def Res_To_Asset(self):

        # Resource to Asset

        if self.txt_Res.toPlainText() == "":
            return
        _type = self.confirm_type_dia()
        tmp_dict_data = json.loads(self.txt_Res.toPlainText())

        # let user decide the type of policy
        try:
            if _type != None:
                _resource = Res.Resource()
                _resource.to_resource(tmp_dict_data)

                _policy = Policy.Policy(_type, "http://example.com/policy:01")     # default

                # σ(res: C.Provider) → ass: C.Party
                assigner_party = RaaA.Provider2Party_c(_resource.provider)
                _policy.add_party(assigner_party)

                # generate Rule
                # σ(res:C.Interface) → ass:C.Asset
                for tmp_interface in _resource.interface_list:
                    # σ(res:R.operation(C.Interface,C.Operation)) →
                    # ass:R.action(C.Rule,C.Action) ∪ ass:R.asset(C.Rule,C.Asset)

                    tmp_rule_list = []

                    # one rule must have one action
                    for tmp_operation in tmp_interface.operation_list:
                        # rule
                        tmp_rule = Rule.Rule("permission")  # default
                        # σ(res:C.Operation) → ass:C.Action
                        tmp_action = RaaA.Operation2Action_c(tmp_operation)
                        tmp_rule.action = tmp_action

                        # σ(res:R.non_functional_char(C.Operation,C.Non Functional Characteristic)) →
                        # ass:R.refinement(C.Action,C.Constraint)
                        for tmp_non_char in tmp_operation.NonFnChar_list:
                            tmp_refinement = RaaA.Non_Func_Char2Constraint_c(tmp_non_char, "refinement")
                            tmp_action.add_refinement(tmp_refinement)

                        # σ(res:R.non functional char(C.Interface,C.Non Functional Characteristic)) →
                        # ass:R.constraint(C.Rule,C.Constraint) ∪ ass:R.asset(C.Rule,C.Asset)
                        tmp_asset = RaaA.Interface2Asset_c(tmp_interface)
                        tmp_rule.add_asset(tmp_asset)
                        for tmp_non_char in tmp_interface.NonFnChar_list:
                            tmp_constraint = RaaA.Non_Func_Char2Constraint_c(tmp_non_char, "constraint")
                            tmp_rule.add_constraint(tmp_constraint)
                        rule_type = self.confirm_rule_dia(json.dumps(tmp_rule.to_dict(), indent=2))

                        tmp_rule.type = rule_type
                        if rule_type == "permission":
                            _policy.add_permission(tmp_rule)
                        elif rule_type == "prohibition":
                            _policy.add_prohibition(tmp_rule)
                        elif rule_type == "obligation":
                            _policy.add_obligation(tmp_rule)

                self.txt_Asset.setText(json.dumps(_policy.to_dict(), indent=2))

        except Exception as e:
            print(e)


        return

    def confirm_type_dia(self):
        dialog1 = QtWidgets.QDialog()
        dialog1.setWindowModality(QtCore.Qt.ApplicationModal)
        confirm_type_dia = confirm_type.Ui_Dialog(dialog1)
        result = dialog1.exec_()
        return confirm_type_dia.get_result(result)

    def confirm_rule_dia(self, txt):
        dialog1 = QtWidgets.QDialog()
        dialog1.setWindowModality(QtCore.Qt.ApplicationModal)
        confirm_rule_dia = confirm_rule.Ui_Dialog(dialog1)
        confirm_rule_dia.textEdit.setText(txt)
        result = dialog1.exec_()
        return confirm_rule_dia.get_result(result)[0]

